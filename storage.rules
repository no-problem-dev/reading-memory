rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // ユーザーが認証されているかチェック
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // 画像ファイルかチェック（書き込み時のみ）
    function isImageFile() {
      return request.resource != null && request.resource.contentType.matches('image/.*');
    }
    
    // ファイルサイズ制限（最大10MB）
    function isValidFileSize(maxSizeMB) {
      return request.resource == null || request.resource.size <= maxSizeMB * 1024 * 1024;
    }
    
    // 新しい画像管理システム（APIサーバー経由でのみアクセス）
    match /images/{imageId} {
      // 一時的にすべてのユーザーに読み取りを許可（デバッグ用）
      allow read: if true;
      allow write: if false; // APIサーバーのサービスアカウントのみ
      allow delete: if false; // APIサーバーのサービスアカウントのみ
    }
    
    // 従来のパス（段階的に廃止予定）
    match /users/{userId}/profile/{fileName} {
      allow read, delete: if isAuthenticated() && request.auth.uid == userId;
      allow write: if false; // 新システムへ移行
    }
    
    match /users/{userId}/books/{bookId}/{fileName} {
      allow read, delete: if isAuthenticated() && request.auth.uid == userId;
      allow write: if false; // 新システムへ移行
    }
    
    match /users/{userId}/books/{bookId}/chat-photos/{photoId} {
      allow read, delete: if isAuthenticated() && request.auth.uid == userId;
      allow write: if false; // 新システムへ移行
    }
    
    // その他すべてのパスへのアクセスを拒否
    match /{allPaths=**} {
      allow read, write, delete: if false;
    }
  }
}